#include "bmp_header.h"
#include <stdio.h>
#include <string.h>

#define MAXCHAR 30
#define MAX 150
#define MAXCOLORS 50

struct BGR // canalele pentru fiecare pixel
{
	int B;
	int G;
	int R;
};

//citirea header-ului si infoheader-ului din fisierul BMP
void readBMP(FILE *captcha, struct bmp_fileheader * captcha_fileheader, struct bmp_infoheader * captcha_infoheader)
{
	fread(&captcha_fileheader->fileMarker1, sizeof(unsigned char), 1, captcha);
	fread(&captcha_fileheader->fileMarker2, sizeof(unsigned char), 1, captcha);
	fread(&captcha_fileheader->bfSize, sizeof(unsigned int), 1, captcha);
	fread(&captcha_fileheader->unused1, sizeof(unsigned short), 1, captcha);
	fread(&captcha_fileheader->unused2, sizeof(unsigned short), 1, captcha);
	fread(&captcha_fileheader->imageDataOffset, sizeof(unsigned int), 1, captcha);

	fread(&captcha_infoheader->biSize, sizeof(unsigned int), 1, captcha);
	fread(&captcha_infoheader->width, sizeof(signed int), 1, captcha);
	fread(&captcha_infoheader->height, sizeof(signed int), 1, captcha);
	fread(&captcha_infoheader->planes, sizeof(unsigned short ), 1, captcha);
	fread(&captcha_infoheader->bitPix, sizeof(unsigned short ), 1, captcha);
	fread(&captcha_infoheader->biCompression, sizeof(unsigned int), 1, captcha);
	fread(&captcha_infoheader->biSizeImage, sizeof(unsigned int), 1, captcha);
	fread(&captcha_infoheader->biXPelsPerMeter, sizeof(int), 1, captcha);
	fread(&captcha_infoheader->biYPelsPerMeter, sizeof(int), 1, captcha);
	fread(&captcha_infoheader->biClrUsed, sizeof(unsigned int), 1, captcha);
	fread(&captcha_infoheader->biClrImportant, sizeof(unsigned int), 1, captcha);
	return;
}

// scrierea header-ului si infoheader-ului intr-un fisier BMP
void writeBMP(FILE *output, struct bmp_fileheader * captcha_fileheader, struct bmp_infoheader * captcha_infoheader)
{
	fwrite(&captcha_fileheader->fileMarker1, sizeof(unsigned char), 1, output);
	fwrite(&captcha_fileheader->fileMarker2, sizeof(unsigned char), 1, output);
	fwrite(&captcha_fileheader->bfSize, sizeof(unsigned int), 1, output);
	fwrite(&captcha_fileheader->unused1, sizeof(unsigned short), 1, output);
	fwrite(&captcha_fileheader->unused2, sizeof(unsigned short), 1, output);
	fwrite(&captcha_fileheader->imageDataOffset, sizeof(unsigned int), 1, output);

	fwrite(&captcha_infoheader->biSize, sizeof(unsigned int), 1, output);
	fwrite(&captcha_infoheader->width, sizeof(signed int), 1, output);
	fwrite(&captcha_infoheader->height, sizeof(signed int), 1, output);
	fwrite(&captcha_infoheader->planes, sizeof(unsigned short ), 1, output);
	fwrite(&captcha_infoheader->bitPix, sizeof(unsigned short ), 1, output);
	fwrite(&captcha_infoheader->biCompression, sizeof(unsigned int), 1, output);
	fwrite(&captcha_infoheader->biSizeImage, sizeof(unsigned int), 1, output);
	fwrite(&captcha_infoheader->biXPelsPerMeter, sizeof(int), 1, output);
	fwrite(&captcha_infoheader->biYPelsPerMeter, sizeof(int), 1, output);
	fwrite(&captcha_infoheader->biClrUsed, sizeof(unsigned int), 1, output);
	fwrite(&captcha_infoheader->biClrImportant, sizeof(unsigned int), 1, output);
	return;
}

int main(void)
{
	FILE *input, *captcha, *output; // input - fisierul input.txt; captcha - fisierul BMP al carui nume e in input.txt; output - fisierul de iesire
	char captcha_name[MAXCHAR], output_name[MAXCHAR]; // filnames
	struct bmp_fileheader captcha_fileheader;
	struct bmp_infoheader captcha_infoheader;
	char matrice[MAX][MAX], matrice_aux[MAX][MAX];
	int n, i, j, k, l, q, r, line, col, padding = 0, aux = 0, nr_colors = 0, nr_numbers = 0, i_pozy = -1, j_pozy = -1; // nr_numbers - cate numere au fost parcurse
	struct BGR color, white;
	struct BGR colors[MAXCOLORS];
	struct BGR matrice_colors[MAX][MAX];
	int vector_vals[MAXCOLORS], nr_vals;
	char collector[MAXCHAR];

	//sir de caractere pentru toate tipurile de cifre
	char nr0[30] = "XXXXXX...XX...XX...XXXXXX";
	char nr1[30] = "....X....X....X....X....X"; // nu ne trebuie, dar asa le avem pe toate
	char nr2[30] = "XXXXX....XXXXXXX....XXXXX";
	char nr3[30] = "XXXXX....XXXXXX....XXXXXX";
	char nr4[30] = "X...XX...XXXXXX....X....X";
	char nr5[30] = "XXXXXX....XXXXX....XXXXXX";
	char nr6[30] = "XXXXXX....XXXXXX...XXXXXX";
	char nr7[30] = "XXXXX....X....X....X....X";
	char nr8[30] = "XXXXXX...XXXXXXX...XXXXXX";
	char nr9[30] = "XXXXXX...XXXXXX....XXXXXX";
	char nr[30];

	// pixelul alb
	white.B = 255;
	white.G = 255;
	white.R= 255;

	input = fopen("input.txt", "rt");

	fgets(captcha_name, MAXCHAR, input); //captcha_name va avea "\n" inainte de "\0"
	if ((strlen(captcha_name)>0) && (captcha_name[strlen (captcha_name) - 1] == '\n'))
	{
		captcha_name[strlen (captcha_name) - 1] = '\0';
	} // s-a eliminat "\n" din captcha_name

	strncpy(output_name, captcha_name, strlen(captcha_name) - 4); // ".bmp" are 4 caractere
	output_name[strlen(captcha_name) - 4] = '\0'; // sa ne asiguram ca se pune "\0"
	strcat(output_name, "_task3.bmp");
	output = fopen(output_name, "wb");

	fgets(collector, MAXCHAR, input); // se citeste al doilea rand din input, cel cu culorile BGR, dar nu il vom folosi

	fgets(collector, MAXCHAR, input); // se citeste array-ul cu numere de eliminat intr-un sir de caractere
	if ((strlen(collector)>0) && (collector[strlen (collector) - 1] == '\n'))
	{
		collector[strlen (collector) - 1] = '\0';
	} // s-a eliminat "\n" din collector

	nr_vals = 0;

	i = 0;

	// se extrag din sirul de caractere numerele care vor fi introduse in vector_vals
	if (collector[i] != '\0')
	{
		while(i <= strlen(collector))
		{
			vector_vals[nr_vals] = collector[i] - '0';
			nr_vals = nr_vals + 1;
			i = i + 2;
		}
	}

	// citim fisierul BMP
	captcha = fopen(captcha_name, "rb");
	readBMP(captcha, &captcha_fileheader, &captcha_infoheader);
	writeBMP(output, &captcha_fileheader, &captcha_infoheader);





	line = captcha_infoheader.height;
	col = captcha_infoheader.width;

	if (((captcha_infoheader.width * 3) % 4) != 0)
	{
		padding = 4 - ((captcha_infoheader.width * 3) % 4);
	}

	// construim matricea cu datele din fisierul BMP captcha
	for (i = line - 1; i >= 0; i--)
	{
		for (j = 0; j < col; j++)
		{
			fread(&color.B, 1, 1, captcha);
			fread(&color.G, 1, 1, captcha);
			fread(&color.R, 1, 1, captcha);

			if (color.B == 255 && color.G == 255 && color.R == 255)
			{
				matrice[i][j] = '.';
			}
			else
			{
				matrice[i][j] = 'X';
			}

			matrice_colors[i][j].B = color.B;
			matrice_colors[i][j].G = color.G;
			matrice_colors[i][j].R = color.R;
		}
		fseek(captcha, padding, SEEK_CUR);
	}

	nr_colors = 0;

	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			matrice_aux[i][j] = matrice[i][j];
		}
	}

	// construim vectorul de culori
	for (j = 0; j < col; j++)
	{
		for (i = 0; i < line; i++)
		{
			if ((j < col - 4) && (matrice[i][j + 4] == 'X') && (matrice[i][j] == '.')) // verificam cazul in care este cifra 1
			{
				if (((j + 4 == col - 2) && (matrice[i][j+3] == '.') && (matrice[i+1][j+3] == '.') && (matrice[i+2][j+3] == '.') && (matrice[i+3][j+3] == '.') && (matrice[i+4][j+3] == '.')) || ((j + 4 < col - 1) && (matrice[i][j+5] == '.')&& (matrice[i+1][j+5] == '.') && (matrice[i+2][j+5] == '.') && (matrice[i+3][j+5] == '.') && (matrice[i+4][j+5] == '.')))
				{
					for (k = i; k < i + 5 ; k++) // eliminam din matrice cifra 1
					{
						matrice[k][j + 4] = '.';
					}
					colors[nr_colors].B = matrice_colors[i][j+4].B;
					colors[nr_colors].G = matrice_colors[i][j+4].G;
					colors[nr_colors].R = matrice_colors[i][j+4].R;
					nr_colors = nr_colors + 1;
				}
			}
			else if (matrice[i][j] == 'X') // verificam cazul in care este alta cifra decat 1
			{
				// construim un sir de caractere pentru restul cifrelor
				n = 0;
				for (k = i; k < i+ 5 ; k++)
				{
					for (l = j; l < j + 5; l++)
					{
						nr[n] = matrice[k][l];
						n = n + 1;
						matrice[k][l] = '.'; // eliminam din matrice cifra 1
					}
				}
				nr[n] = '\0';

				colors[nr_colors].B = matrice_colors[i][j].B;
				colors[nr_colors].G = matrice_colors[i][j].G;
				colors[nr_colors].R = matrice_colors[i][j].R;
				nr_colors = nr_colors + 1;
			}
		}
		fseek(captcha, padding, SEEK_CUR);
	}




	//
	printf("%d\n", nr_colors);
	for (i = 0; i < nr_colors; i++)
	{
		printf("%d %d %d\n", colors[i].B, colors[i].G, colors[i].R);
	}
	printf("\n");
	//





	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			matrice[i][j] = matrice_aux[i][j];
		}
	}


	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			printf("%c", matrice[i][j]);
		}
		printf("\n");
	}





	// eliminam cifrele
	for (j = 0; j < col; j++)
	{
		for (i = 0; i < line; i++)
		{
			if ((i < line - 4) && (j < col - 4) && (matrice[i][j + 4] == 'X') && (matrice[i][j] == '.') && (matrice[i+1][j+4] == 'X') && (matrice[i+2][j+4] == 'X') && (matrice[i+3][j+4] == 'X') && (matrice[i+4][j+4] == 'X')) // verificam cazul in care este cifra 1
			{
				if (((j + 4 == col - 1) && (matrice[i][j+3] == '.') && (matrice[i+1][j+3] == '.') && (matrice[i+2][j+3] == '.') && (matrice[i+3][j+3] == '.') && (matrice[i+4][j+3] == '.')) || ((j + 4 < col - 1) && (matrice[i][j+5] == '.')&& (matrice[i+1][j+5] == '.') && (matrice[i+2][j+5] == '.') && (matrice[i+3][j+5] == '.') && (matrice[i+4][j+5] == '.')))
				{
					nr_numbers = nr_numbers + 1;
					for (l = 0; l < nr_vals; l++)
					{
						if (vector_vals[l] == 1)
						{
							break;
						}
					}

					if (l < nr_vals)
					{
						for (k = i; k < i + 5 ; k++)
						{
							matrice[k][j + 4] = '.';
						}
						matrice[i][j] = 'Y';
						for (q = nr_numbers - 1; q < nr_colors - 1; q++)
						{
							colors[q] = colors[q+1];
						}
						nr_colors = nr_colors - 1;
						nr_numbers = nr_numbers - 1;
					}
				}
			}
			else if ((matrice[i][j] == 'X') && (i < line - 4) && (j < col - 4)) // verificam cazul in care este alta cifra decat 1
			{
				// construim un sir de caractere pentru restul cifrelor
				n = 0;
				for (k = i; k < i+ 5 ; k++)
				{
					for (l = j; l < j + 5; l++)
					{
						nr[n] = matrice[k][l];
						n = n + 1;
					}
				}

				nr[n] = '\0';

				for (r = 0; r < nr_vals; r++)
				{
					if (strcmp(nr, nr0) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr2) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr3) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr4) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr5) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr6) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr7) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr8) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
					if (strcmp(nr, nr9) == 0)
					{
						nr_numbers = nr_numbers + 1;
						break;
					}
				}


				for (r = 0; r < nr_vals; r++)
				{
					if (strcmp(nr, nr0) == 0)
					{
						if (vector_vals[r] == 0)
						{
							break;
						}
					}
					if (strcmp(nr, nr2) == 0)
					{
						if (vector_vals[r] == 2)
						{
							break;
						}
					}
					if (strcmp(nr, nr3) == 0)
					{
						if (vector_vals[r] == 3)
						{
							break;
						}
					}
					if (strcmp(nr, nr4) == 0)
					{
						if (vector_vals[r] == 4)
						{
							break;
						}
					}
					if (strcmp(nr, nr5) == 0)
					{
						if (vector_vals[r] == 5)
						{
							break;
						}
					}
					if (strcmp(nr, nr6) == 0)
					{
						if (vector_vals[r] == 6)
						{
							break;
						}
					}
					if (strcmp(nr, nr7) == 0)
					{
						if (vector_vals[r] == 7)
						{
							break;
						}
					}
					if (strcmp(nr, nr8) == 0)
					{
						if (vector_vals[r] == 8)
						{
							break;
						}
					}
					if (strcmp(nr, nr9) == 0)
					{
						if (vector_vals[r] == 9)
						{
							break;
						}
					}
				}


				if (r < nr_vals)
				{
					for (k = i; k < i+ 5 ; k++)
					{
						for (l = j; l < j + 5; l++)
						{
							matrice[k][l] = '.'; // eliminam din matrice cifra 1
						}
					}
					matrice[i][j] = 'Y';
					for (q = nr_numbers - 1; q < nr_colors - 1; q++)
					{
						colors[q] = colors[q+1];
					}
					nr_colors = nr_colors - 1;
					nr_numbers = nr_numbers - 1;
				}
								
			}
		}
	}

printf("\n");

for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			printf("%c", matrice[i][j]);
		}
		printf("\n");
	}


	// mutam cifrele in pozitiile cifrelor eliminate anterior
for (r = 0; r < 20; r++)
{
	i_pozy = -1, j_pozy = -1;

	for (j = 0; j < col; j++)
	{
		for (i = 0; i < line; i++)
		{
			if (matrice[i][j] == 'Y')
			{
				i_pozy = i;
				j_pozy = j;
			}
			else if ((i < line - 4) && (j < col - 4) && (matrice[i][j + 4] == 'X') && (matrice[i][j] == '.') && (matrice[i+1][j+4] == 'X') && (matrice[i+2][j+4] == 'X') && (matrice[i+3][j+4] == 'X') && (matrice[i+4][j+4] == 'X') && (i_pozy >= 0) && (j_pozy >= 0)) // verificam cazul in care este cifra 1
			{
				if (((j + 4 == col - 1) && (matrice[i][j+3] == '.') && (matrice[i+1][j+3] == '.') && (matrice[i+2][j+3] == '.') && (matrice[i+3][j+3] == '.') && (matrice[i+4][j+3] == '.')) || ((j + 4 < col - 1) && (matrice[i][j+5] == '.')&& (matrice[i+1][j+5] == '.') && (matrice[i+2][j+5] == '.') && (matrice[i+3][j+5] == '.') && (matrice[i+4][j+5] == '.')))
				{
					for (k = i_pozy; k < i_pozy + 5; k++)
					{
						matrice[k][j_pozy + 4] = 'X';
					}
					matrice[i_pozy][j_pozy] = '.';

					for (k = i; k < i + 5; k++)
					{
						matrice[k][j + 4] = '.';
					}
					matrice[i][j] = 'Y';
					i_pozy = i;
					j_pozy = j;
				}
			}
			else if ((matrice[i][j] == 'X') && (i < line - 4) && (j < col - 4) && (i_pozy >= 0) && (j_pozy >= 0)) // verificam cazul in care este alta cifra decat 1
			{
				// construim un sir de caractere pentru restul cifrelor
				n = 0;

				for (k = i; k < i + 5 ; k++)
				{
					for (l = j; l < j + 5; l++)
					{
						nr[n] = matrice[k][l];
						n = n + 1;
					}
				}


				nr[n] = '\0';

				if ((strcmp(nr, nr0) == 0) || (strcmp(nr, nr2) == 0) || (strcmp(nr, nr3) == 0) || (strcmp(nr, nr4) == 0) || (strcmp(nr, nr5) == 0) || (strcmp(nr, nr6) == 0) || (strcmp(nr, nr7) == 0) || (strcmp(nr, nr8) == 0) || (strcmp(nr, nr9) == 0))
				{
					for (k = i; k < i+ 5 ; k++)
					{
						for (l = j; l < j + 5; l++)
						{
							matrice[k][l] = '.';
						}
					}

					matrice[i][j] = 'Y';

					n=0;

					for (k = i_pozy; k < i_pozy + 5 ; k++)
					{
						for (l = j_pozy; l < j_pozy + 5; l++)
						{
							matrice[k][l] = nr[n];
							n = n + 1;
						}
					}

					i_pozy = i;
					j_pozy = j;
				}
								
			}
		}
	}
}

	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (matrice[i][j] == 'Y')
			{
				matrice[i][j] = '.';
			}
		}
	}

	printf("\n");

	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			printf("%c", matrice[i][j]);
		}
		printf("\n");
	}

	//
	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			matrice_aux[i][j] = matrice[i][j];
		}
	}

	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			matrice_colors[i][j].B = white.B;
			matrice_colors[i][j].G = white.G;
			matrice_colors[i][j].R = white.R;
		}
	}

	nr_numbers = 0;

	for (j = 0; j < col; j++)
	{
		for (i = 0; i < line; i++)
		{
			if ((j < col - 4) && (matrice[i][j + 4] == 'X') && (matrice[i][j] == '.')) // verificam cazul in care este cifra 1
			{
				if (((j + 4 == col - 2) && (matrice[i][j+3] == '.') && (matrice[i+1][j+3] == '.') && (matrice[i+2][j+3] == '.') && (matrice[i+3][j+3] == '.') && (matrice[i+4][j+3] == '.')) || ((j + 4 < col - 1) && (matrice[i][j+5] == '.')&& (matrice[i+1][j+5] == '.') && (matrice[i+2][j+5] == '.') && (matrice[i+3][j+5] == '.') && (matrice[i+4][j+5] == '.')))
				{
					nr_numbers = nr_numbers + 1;
					for (k = i; k < i + 5 ; k++) // eliminam din matrice cifra 1
					{
						matrice[k][j + 4] = '.';
						matrice_colors[k][j+4].B = colors[nr_numbers - 1].B;
						matrice_colors[k][j+4].G = colors[nr_numbers - 1].G;
						matrice_colors[k][j+4].R = colors[nr_numbers - 1].R;
					}
				}
			}
			else if (matrice[i][j] == 'X') // verificam cazul in care este alta cifra decat 1
			{
				// construim un sir de caractere pentru restul cifrelor
				nr_numbers = nr_numbers + 1;
				n = 0;
				for (k = i; k < i+ 5 ; k++)
				{
					for (l = j; l < j + 5; l++)
					{
						nr[n] = matrice[k][l];
						n = n + 1;
						if (matrice[k][l] == 'X')
						{
							matrice_colors[k][l].B = colors[nr_numbers - 1].B;
							matrice_colors[k][l].G = colors[nr_numbers - 1].G;
							matrice_colors[k][l].R = colors[nr_numbers - 1].R;
						}
						matrice[k][l] = '.'; // eliminam din matrice cifra 1
					}
				}
				nr[n] = '\0';
			}
		}
	}

	for (i = 0; i < line; i++)
	{
		for (j = 0; j < col; j++)
		{
			matrice[i][j] = matrice_aux[i][j];
		}
	}

	for (i = line - 1; i >= 0; i--)
	{
		for (j = 0; j < col; j++)
		{
			if (matrice[i][j] == '.')
			{
				fwrite(&white.B, 1, 1, output);
				fwrite(&white.G, 1, 1, output);
				fwrite(&white.R, 1, 1, output);
			}
			else
			{
				fwrite(&matrice_colors[i][j].B, 1, 1, output);
				fwrite(&matrice_colors[i][j].G, 1, 1, output);
				fwrite(&matrice_colors[i][j].R, 1, 1, output);
			}
		}
		fwrite(&aux, padding, 1, output);
	}

	printf("%d\n", nr_colors);
	for (i = 0; i < nr_colors; i++)
	{
		printf("%d %d %d\n", colors[i].B, colors[i].G, colors[i].R);
	}
	printf("\n");





	fclose(input);
	fclose(captcha);
	fclose(output);

	return 0;
}
